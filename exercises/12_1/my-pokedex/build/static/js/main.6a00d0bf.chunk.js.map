{"version":3,"sources":["data.js","App.js","serviceWorker.js","index.js"],"names":["Pokemons","id","name","type","averageWeight","value","measurementUnit","image","moreInfo","Card","this","props","data","filter","includes","map","key","src","alt","React","Component","App","serFilterType","event","setState","target","state","className","onChange","selected","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kOAsGeA,G,MAtGE,CACb,CACIC,GAAI,GACJC,KAAM,UACNC,KAAM,WACNC,cAAe,CACXC,MAAO,MACPC,gBAAiB,MAErBC,MAAO,2DACPC,SAAU,kEAEd,CACIP,GAAI,EACJC,KAAM,aACNC,KAAM,OACNC,cAAe,CACXC,MAAO,MACPC,gBAAiB,MAErBC,MAAO,yDACPC,SAAU,qEAEd,CACIP,GAAI,GACJC,KAAM,WACNC,KAAM,MACNC,cAAe,CACXC,MAAO,MACPC,gBAAiB,MAErBC,MAAO,yDACPC,SAAU,mEAEd,CACIP,GAAI,GACJC,KAAM,QACNC,KAAM,SACNC,cAAe,CACXC,MAAO,MACPC,gBAAiB,MAErBC,MAAO,yDACPC,SAAU,gEAEd,CACIP,GAAI,GACJC,KAAM,WACNC,KAAM,UACNC,cAAe,CACXC,MAAO,OACPC,gBAAiB,MAErBC,MAAO,2DACPC,SAAU,mEAEd,CACIP,GAAI,IACJC,KAAM,MACNC,KAAM,UACNC,cAAe,CACXC,MAAO,MACPC,gBAAiB,MAErBC,MAAO,yDACPC,SAAU,8DAEd,CACIP,GAAI,GACJC,KAAM,WACNC,KAAM,OACNC,cAAe,CACXC,MAAO,OACPC,gBAAiB,MAErBC,MAAO,yDACPC,SAAU,mEAEd,CACIP,GAAI,IACJC,KAAM,UACNC,KAAM,SACNC,cAAe,CACXC,MAAO,QACPC,gBAAiB,MAErBC,MAAO,yDACPC,SAAU,kEAEd,CACIP,GAAI,IACJC,KAAM,YACNC,KAAM,SACNC,cAAe,CACXC,MAAO,OACPC,gBAAiB,MAErBC,MAAO,yDACPC,SAAU,sEC9FZC,E,uKACM,IAAD,EACkBC,KAAKC,MAAtBC,EADD,EACCA,KAAMC,EADP,EACOA,OACd,OACED,EAAKC,QAAO,kBAAc,CAAd,EAAGV,KAAkB,OAAOW,SAASD,MAC9CE,KAAI,gBAAGd,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,KAAMC,EAAnB,EAAmBA,cAAeG,EAAlC,EAAkCA,MAAlC,OACH,wBAAIS,IAAKd,GACP,6BACE,yBAAKe,IAAKV,EAAOW,IAAKhB,KAExB,6BACHD,EADG,MACIC,EADJ,UACiBC,EADjB,mBACuCC,EAAcC,MADrD,IAC6DD,EAAcE,yB,GAXpEa,IAAMC,WAqDVC,E,kDA/Bb,WAAYV,GAAQ,IAAD,8BACjB,cAAMA,IAIRW,cAAgB,SAAAC,GACd,EAAKC,SAAS,CACZrB,KAA6B,KAAvBoB,EAAME,OAAOpB,MAAe,MAAQkB,EAAME,OAAOpB,SALzD,EAAKqB,MAAS,CAAEvB,KAAM,OAFL,E,qDAWjB,OACE,yBAAKwB,UAAU,OACb,yBAAKA,UAAU,WACb,4BAAQC,SAAUlB,KAAKY,cAAenB,KAAK,QACzC,4BAAQE,MAAM,WAAd,WACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,MAAMwB,SAAS,YAA7B,SAGJ,kBAAC,EAAD,CAAMhB,OAAQH,KAAKgB,MAAMvB,KAAMS,KAAMZ,S,GA1B3BmB,IAAMC,WCbJU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.6a00d0bf.chunk.js","sourcesContent":["const Pokemons = [\n    {\n        id: 25,\n        name: \"Pikachu\",\n        type: \"Electric\",\n        averageWeight: {\n            value: \"6.0\",\n            measurementUnit: \"kg\"\n        },\n        image: \"https://cdn.bulbagarden.net/upload/b/b2/Spr_5b_025_m.png\",\n        moreInfo: \"https://bulbapedia.bulbagarden.net/wiki/Pikachu_(Pok%C3%A9mon)\"\n    },\n    {\n        id: 4,\n        name: \"Charmander\",\n        type: \"Fire\",\n        averageWeight: {\n            value: \"8.5\",\n            measurementUnit: \"kg\"\n        },\n        image: \"https://cdn.bulbagarden.net/upload/0/0a/Spr_5b_004.png\",\n        moreInfo: \"https://bulbapedia.bulbagarden.net/wiki/Charmander_(Pok%C3%A9mon)\"\n    },\n    {\n        id: 10,\n        name: \"Caterpie\",\n        type: \"Bug\",\n        averageWeight: {\n            value: \"2.9\",\n            measurementUnit: \"kg\"\n        },\n        image: \"https://cdn.bulbagarden.net/upload/8/83/Spr_5b_010.png\",\n        moreInfo: \"https://bulbapedia.bulbagarden.net/wiki/Caterpie_(Pok%C3%A9mon)\"\n    },\n    {\n        id: 23,\n        name: \"Ekans\",\n        type: \"Poison\",\n        averageWeight: {\n            value: \"6.9\",\n            measurementUnit: \"kg\"\n        },\n        image: \"https://cdn.bulbagarden.net/upload/1/18/Spr_5b_023.png\",\n        moreInfo: \"https://bulbapedia.bulbagarden.net/wiki/Ekans_(Pok%C3%A9mon)\"\n    },\n    {\n        id: 65,\n        name: \"Alakazam\",\n        type: \"Psychic\",\n        averageWeight: {\n            value: \"48.0\",\n            measurementUnit: \"kg\"\n        },\n        image: \"https://cdn.bulbagarden.net/upload/8/88/Spr_5b_065_m.png\",\n        moreInfo: \"https://bulbapedia.bulbagarden.net/wiki/Alakazam_(Pok%C3%A9mon)\"\n    },\n    {\n        id: 151,\n        name: \"Mew\",\n        type: \"Psychic\",\n        averageWeight: {\n            value: \"4.0\",\n            measurementUnit: \"kg\"\n        },\n        image: \"https://cdn.bulbagarden.net/upload/4/43/Spr_5b_151.png\",\n        moreInfo: \"https://bulbapedia.bulbagarden.net/wiki/Mew_(Pok%C3%A9mon)\"\n    },\n    {\n        id: 78,\n        name: \"Rapidash\",\n        type: \"Fire\",\n        averageWeight: {\n            value: \"95.0\",\n            measurementUnit: \"kg\"\n        },\n        image: \"https://cdn.bulbagarden.net/upload/5/58/Spr_5b_078.png\",\n        moreInfo: \"https://bulbapedia.bulbagarden.net/wiki/Rapidash_(Pok%C3%A9mon)\"\n    },\n    {\n        id: 143,\n        name: \"Snorlax\",\n        type: \"Normal\",\n        averageWeight: {\n            value: \"460.0\",\n            measurementUnit: \"kg\"\n        },\n        image: \"https://cdn.bulbagarden.net/upload/4/40/Spr_5b_143.png\",\n        moreInfo: \"https://bulbapedia.bulbagarden.net/wiki/Snorlax_(Pok%C3%A9mon)\"\n    },\n    {\n        id: 148,\n        name: \"Dragonair\",\n        type: \"Dragon\",\n        averageWeight: {\n            value: \"16.5\",\n            measurementUnit: \"kg\"\n        },\n        image: \"https://cdn.bulbagarden.net/upload/2/2c/Spr_5b_148.png\",\n        moreInfo: \"https://bulbapedia.bulbagarden.net/wiki/Dragonair_(Pok%C3%A9mon)\"\n    }\n];\n\nexport default Pokemons;\n","import React from 'react';\nimport './App.css';\nimport Pokemons from './data';\n\nclass Card extends React.Component {\n  render() {\n    const { data, filter } = this.props;\n    return (\n      data.filter(({ type }) => [type, 'All'].includes(filter))\n        .map(({ id, name, type, averageWeight, image }) => (\n          <li key={name}>\n            <div>\n              <img src={image} alt={name} />\n            </div>\n            <div>\n        {id} - {name} type: {type} averageWeight: {averageWeight.value} {averageWeight.measurementUnit}\n            </div>\n          </li>\n       ))\n\n    )\n    \n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = ({ type: 'All' })\n  }\n\n  serFilterType = event => {\n    this.setState({\n      type: event.target.value === '' ? 'All' : event.target.value\n    })\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"pokedex\">\n          <select onChange={this.serFilterType} type='text'>\n            <option value=\"Eletric\" >Eletric</option>\n            <option value=\"Fire\">Fire</option>\n            <option value=\"Bug\">Bug</option>\n            <option value=\"Poison\">Poison</option>\n            <option value=\"Psychic\">Psychic</option>\n            <option value=\"Normal\">Normal</option>\n            <option value=\"Dragon\">Dragon</option>\n            <option value=\"All\" selected=\"selected\">All</option>\n          </select>\n        </div>\n        <Card filter={this.state.type} data={Pokemons}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}